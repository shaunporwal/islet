[{"path":"http://www.shaunporwal.com/islet/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 islet authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://www.shaunporwal.com/islet/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Shaun P. Porwal. Author, maintainer.","code":""},{"path":"http://www.shaunporwal.com/islet/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Porwal S (2025). islet: Provides Data Pipelining Functions. R package version 0.2.3, http://www.shaunporwal.com/islet/.","code":"@Manual{,   title = {islet: Provides Data Pipelining Functions},   author = {Shaun P. Porwal},   year = {2025},   note = {R package version 0.2.3},   url = {http://www.shaunporwal.com/islet/}, }"},{"path":"http://www.shaunporwal.com/islet/index.html","id":"islet","dir":"","previous_headings":"","what":"Provides Data Pipelining Functions","title":"Provides Data Pipelining Functions","text":"Islet contains personal R functions. ’m also using learn create R packages.","code":""},{"path":"http://www.shaunporwal.com/islet/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Provides Data Pipelining Functions","text":"can install development version islet GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"shaunporwal/islet\")"},{"path":"http://www.shaunporwal.com/islet/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Provides Data Pipelining Functions","text":"basic example shows solve common problem:","code":"library(islet) # Simple Example, Default '&' Border islet::make_banner(str_to_banner = 'analyze column from dataframe') #> #&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&& #> #&&  analyze column from dataframe  && #> #&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&& # Output Saved to Clipboard, Can Cmd+v or Ctrl+v to directly paste banner # New Banner Border Example islet::make_banner(str_to_banner = 'analyze column from dataframe',                    banner_chr = '+') #> #+++++++++++++++++++++++++++++++++++++ #> #++  analyze column from dataframe  ++ #> #+++++++++++++++++++++++++++++++++++++"},{"path":"http://www.shaunporwal.com/islet/reference/base_dataset_metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Metrics for Base Dataset Selection — base_dataset_metrics","title":"Compute Metrics for Base Dataset Selection — base_dataset_metrics","text":"function computes metrics table set dataframes provided named list. compares unique values specified identifier column across dataframes. identifier column coerced specified type comparison. resulting table includes count unique identifiers, total common identifiers shared dataframes, logical flag indicating main dataset (one highest total common identifier count).","code":""},{"path":"http://www.shaunporwal.com/islet/reference/base_dataset_metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Metrics for Base Dataset Selection — base_dataset_metrics","text":"","code":"base_dataset_metrics(named_list_dfs, identifier, identifier_type)"},{"path":"http://www.shaunporwal.com/islet/reference/base_dataset_metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Metrics for Base Dataset Selection — base_dataset_metrics","text":"named_list_dfs named list dataframes. identifier character string specifying column name used identifier. identifier_type character string specifying type identifier column coerced. Valid options include \"numeric\", \"character\", \"integer\", \"factor\".","code":""},{"path":"http://www.shaunporwal.com/islet/reference/base_dataset_metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Metrics for Base Dataset Selection — base_dataset_metrics","text":"data frame following columns: DataFrame Name dataframe. Unique_Count Number unique identifier values dataframe. Total_Common Sum identifier overlaps dataframes. Is_Main Logical, TRUE dataframe considered main dataset based maximum total common count.","code":""},{"path":"http://www.shaunporwal.com/islet/reference/base_dataset_metrics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Metrics for Base Dataset Selection — base_dataset_metrics","text":"main dataset determined comparing number common identifier values dataframes.","code":""},{"path":"http://www.shaunporwal.com/islet/reference/base_dataset_metrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Metrics for Base Dataset Selection — base_dataset_metrics","text":"","code":"if (FALSE) { # \\dontrun{ # Assume df1, df2, df3 are dataframes with a column 'MRN' named_list <- list(df1 = df1, df2 = df2, df3 = df3) metrics <- base_dataset_metrics(named_list, \"MRN\", \"numeric\") print(metrics) } # }"},{"path":"http://www.shaunporwal.com/islet/reference/check_duplicates.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if there are duplicate rows in a dataframe based on grouped columns — check_duplicates","title":"Check if there are duplicate rows in a dataframe based on grouped columns — check_duplicates","text":"Check duplicate rows dataframe based grouped columns","code":""},{"path":"http://www.shaunporwal.com/islet/reference/check_duplicates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if there are duplicate rows in a dataframe based on grouped columns — check_duplicates","text":"","code":"check_duplicates(data_df, group_by_vars = NULL, print_dups = TRUE)"},{"path":"http://www.shaunporwal.com/islet/reference/check_duplicates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if there are duplicate rows in a dataframe based on grouped columns — check_duplicates","text":"data_df Dataframe checked duplicates group_by_vars string vector strings column name(s) group asserting uniqueness print_dups boolean argument, TRUE, allow function display duplicate rows","code":""},{"path":"http://www.shaunporwal.com/islet/reference/check_duplicates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if there are duplicate rows in a dataframe based on grouped columns — check_duplicates","text":"Duplicate rows, general variable/column groupings","code":""},{"path":"http://www.shaunporwal.com/islet/reference/check_duplicates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if there are duplicate rows in a dataframe based on grouped columns — check_duplicates","text":"","code":"# Load the dplyr package library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union  # Create a sample data frame data_df <- data.frame(   ID = c(1, 1, 2, 3, 4),   Age = c(25, 25, 30, 40, 50),   Income = c(50000, 50000, 60000, 70000, 80000) )  # Call the function to check for duplicates in the entire data frame check_duplicates(data_df) #> [1] \"Duplicates Exist:\" #>   ID Age Income #> 1  1  25  50000  # Call the function to check for duplicates within the \"ID\" column check_duplicates(data_df, group_by_vars = \"ID\") #> [1] \"Duplicates Exist:\" #>   ID Age Income #> 1  1  25  50000  # Call the function to check for duplicates within the \"ID\" and \"Age\" columns check_duplicates(data_df, group_by_vars = c(\"ID\", \"Age\")) #> [1] \"Duplicates Exist:\" #>   ID Age Income #> 1  1  25  50000"},{"path":"http://www.shaunporwal.com/islet/reference/compare_clean_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare and Analyze Clean Data — compare_clean_data","title":"Compare and Analyze Clean Data — compare_clean_data","text":"function compares two clean datasets, filters based specified date range, generates outputs numeric, factor, character, binary, date, data types. results saved output directory, optional views data can displayed saved.","code":""},{"path":"http://www.shaunporwal.com/islet/reference/compare_clean_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare and Analyze Clean Data — compare_clean_data","text":"","code":"compare_clean_data(   old_data,   new_data,   output_dir,   final_vars_set,   date_col,   limit_to_same_date = TRUE,   show_views = FALSE,   save_views = FALSE )"},{"path":"http://www.shaunporwal.com/islet/reference/compare_clean_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare and Analyze Clean Data — compare_clean_data","text":"old_data Dataframe. old dataset comparison. new_data Dataframe. new dataset comparison. output_dir Character. Path directory output files saved. final_vars_set Character vector. List variable names include comparison. date_col Character. Name column datasets representing date. function uses column filter rows based date range. limit_to_same_date Logical. Whether filter new dataset match date range old dataset (default: TRUE). show_views Logical. Whether display data views RStudio Viewer (default: FALSE). save_views Logical. Whether save views dataframes disk (default: FALSE).","code":""},{"path":"http://www.shaunporwal.com/islet/reference/compare_clean_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare and Analyze Clean Data — compare_clean_data","text":"list dataframes containing comparison results. Dataframes include numeric, factor, character, binary, date, derived datasets. Entries missing data omitted.","code":""},{"path":"http://www.shaunporwal.com/islet/reference/compare_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare Column Names Between Two Objects — compare_columns","title":"Compare Column Names Between Two Objects — compare_columns","text":"Compares column names two objects (data frames vectors column names) provides detailed summary unique shared columns","code":""},{"path":"http://www.shaunporwal.com/islet/reference/compare_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare Column Names Between Two Objects — compare_columns","text":"","code":"compare_columns(   obj1,   obj2,   obj1_name = \"obj1\",   obj2_name = \"obj2\",   group_by_col = NULL )"},{"path":"http://www.shaunporwal.com/islet/reference/compare_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare Column Names Between Two Objects — compare_columns","text":"obj1 data frame, tibble, vector column names obj2 data frame, tibble, vector column names obj1_name Character string naming first object (default: \"obj1\") obj2_name Character string naming second object (default: \"obj2\") group_by_col Character string specifying column name grouping (default: NULL)","code":""},{"path":"http://www.shaunporwal.com/islet/reference/compare_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare Column Names Between Two Objects — compare_columns","text":"list containing: filtered_objects: List objects containing unique columns summary_data: List comparison statistics tables: GT tables showing comparison results","code":""},{"path":"http://www.shaunporwal.com/islet/reference/compare_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare Column Names Between Two Objects — compare_columns","text":"","code":"# Compare column names of two data frames compare_columns(mtcars, iris)  # Compare vectors of column names compare_columns(names(mtcars), names(iris))"},{"path":"http://www.shaunporwal.com/islet/reference/compare_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare Dataframes — compare_df","title":"Compare Dataframes — compare_df","text":"Compares two datasets, summarizing numeric, factor, character, binary, date, group-specific fields. Handles single dataset analysis comparison two datasets.","code":""},{"path":"http://www.shaunporwal.com/islet/reference/compare_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare Dataframes — compare_df","text":"","code":"compare_df(   old_data,   new_data = NULL,   suffix_term = \"\",   ind_outcomes = c(\"\"),   group_col,   add_years = FALSE )"},{"path":"http://www.shaunporwal.com/islet/reference/compare_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare Dataframes — compare_df","text":"old_data Dataframe containing base dataset comparison new_data Optional dataframe compare old_data. NULL, old_data analyzed suffix_term Character string append parsed column names (default: \"\") ind_outcomes Character vector individual outcomes summarize (default: \"\") group_col Required character string specifying grouping variable column name add_years Logical indicating whether include year-based summaries (default: FALSE)","code":""},{"path":"http://www.shaunporwal.com/islet/reference/compare_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare Dataframes — compare_df","text":"list containing: numeric_join Numeric field comparisons factor_join Factor level comparisons char_join Character field comparisons bin_join Binary field comparisons date_join Date field comparisons group_join Group-specific comparisons component may NULL type data present.","code":""},{"path":"http://www.shaunporwal.com/islet/reference/excel_to_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Excel File to CSV — excel_to_csv","title":"Convert Excel File to CSV — excel_to_csv","text":"Convert Excel File CSV","code":""},{"path":"http://www.shaunporwal.com/islet/reference/excel_to_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Excel File to CSV — excel_to_csv","text":"","code":"excel_to_csv(path, filename, sheet = NULL)"},{"path":"http://www.shaunporwal.com/islet/reference/excel_to_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Excel File to CSV — excel_to_csv","text":"path Directory path containing Excel file filename Excel filename extension sheet Sheet name number. Default NULL reads first sheet","code":""},{"path":"http://www.shaunporwal.com/islet/reference/excel_to_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Excel File to CSV — excel_to_csv","text":"Invisibly returns CSV output path","code":""},{"path":"http://www.shaunporwal.com/islet/reference/get_sql.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and Process an SQL File — get_sql","title":"Read and Process an SQL File — get_sql","text":"Reads SQL file line line, replaces tabs spaces, converts single-line SQL comments (--) C-style comments (/* ... */).","code":""},{"path":"http://www.shaunporwal.com/islet/reference/get_sql.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and Process an SQL File — get_sql","text":"","code":"get_sql(filepath)"},{"path":"http://www.shaunporwal.com/islet/reference/get_sql.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and Process an SQL File — get_sql","text":"filepath string representing path SQL file.","code":""},{"path":"http://www.shaunporwal.com/islet/reference/get_sql.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and Process an SQL File — get_sql","text":"single string containing processed SQL code.","code":""},{"path":"http://www.shaunporwal.com/islet/reference/get_sql.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and Process an SQL File — get_sql","text":"","code":"# Example usage: # sql_code <- get_sql(\"path/to/sql_file.sql\")"},{"path":"http://www.shaunporwal.com/islet/reference/islet-package.html","id":null,"dir":"Reference","previous_headings":"","what":"islet: Provides Data Pipelining Functions — islet-package","title":"islet: Provides Data Pipelining Functions — islet-package","text":"package houses data pipelining functions.","code":""},{"path":[]},{"path":"http://www.shaunporwal.com/islet/reference/islet-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"islet: Provides Data Pipelining Functions — islet-package","text":"Maintainer: Shaun P. Porwal shaun.Porwal@gmail.com","code":""},{"path":"http://www.shaunporwal.com/islet/reference/llm_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Structured Column to a Dataframe Using a Language Model — llm_structure","title":"Add Structured Column to a Dataframe Using a Language Model — llm_structure","text":"Processes column data frame using language model.","code":""},{"path":"http://www.shaunporwal.com/islet/reference/llm_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Structured Column to a Dataframe Using a Language Model — llm_structure","text":"","code":"llm_structure(df, col_name, prompt, model = \"gpt-4o-mini\")"},{"path":"http://www.shaunporwal.com/islet/reference/llm_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Structured Column to a Dataframe Using a Language Model — llm_structure","text":"df data frame containing input data. col_name character string specifying column name process. prompt character string containing prompt language model. model character string specifying language model use (e.g., \"gpt-4o-mini\").","code":""},{"path":"http://www.shaunporwal.com/islet/reference/llm_structure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Structured Column to a Dataframe Using a Language Model — llm_structure","text":"data frame additional column named <col_name>_llm containing language model's output.","code":""},{"path":"http://www.shaunporwal.com/islet/reference/make_banner.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Banner for Code Separation/Organization — make_banner","title":"Create a Banner for Code Separation/Organization — make_banner","text":"Create Banner Code Separation/Organization","code":""},{"path":"http://www.shaunporwal.com/islet/reference/make_banner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Banner for Code Separation/Organization — make_banner","text":"","code":"make_banner(str_to_banner, banner_chr = \"&\", output = TRUE)"},{"path":"http://www.shaunporwal.com/islet/reference/make_banner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Banner for Code Separation/Organization — make_banner","text":"str_to_banner String Convert Banner banner_chr Banner Boundary Character output Boolean, TRUE output, FALSE Output","code":""},{"path":"http://www.shaunporwal.com/islet/reference/make_banner.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Banner for Code Separation/Organization — make_banner","text":"Invisible String","code":""},{"path":"http://www.shaunporwal.com/islet/reference/make_banner.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Banner for Code Separation/Organization — make_banner","text":"","code":"make_banner(str_to_banner = 'asdf', banner_chr = '&', output = TRUE) #> #&&&&&&&&&&&& #> #&&  asdf  && #> #&&&&&&&&&&&&"},{"path":"http://www.shaunporwal.com/islet/reference/parse_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a Dataframe for Analysis — parse_function","title":"Parse a Dataframe for Analysis — parse_function","text":"Processes dataframe generate summaries numeric, factor, character, binary, date, data types. Supports year-based summaries group-specific outcomes. handle cases certain column types present dataset.","code":""},{"path":"http://www.shaunporwal.com/islet/reference/parse_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a Dataframe for Analysis — parse_function","text":"","code":"parse_function(   parse_df,   suffix_term = \"\",   ind_outcomes = c(\"\"),   group_col = NULL,   add_years = FALSE )"},{"path":"http://www.shaunporwal.com/islet/reference/parse_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse a Dataframe for Analysis — parse_function","text":"parse_df Dataframe. Input dataframe parse analyze. suffix_term Character. Suffix append parsed column names (default: \"\"). ind_outcomes Character vector. Individual outcomes parsing group-specific summaries (default: \"\"). group_col Character. Column name representing grouping variable (default: NULL). add_years Logical. Include year-based summaries output (default: FALSE).","code":""},{"path":"http://www.shaunporwal.com/islet/reference/parse_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse a Dataframe for Analysis — parse_function","text":"list dataframes summarizing input dataset. includes summaries column types present input data: date_df Summaries date columns (present). binary_df Summaries binary columns (present). char_df Summaries character columns (present). factor_df Summaries factor columns (present). summary_numeric Summaries numeric columns (present). group_df Summaries group specified outcomes (applicable).","code":""},{"path":"http://www.shaunporwal.com/islet/reference/read_raw_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and Clean Raw Data — read_raw_data","title":"Read and Clean Raw Data — read_raw_data","text":"function reads CSV file performs several cleaning steps: Optionally converts column names uppercase using janitor::clean_names. Attempts parse character columns dates ymd format. Optionally converts character columns uppercase parsed dates.","code":""},{"path":"http://www.shaunporwal.com/islet/reference/read_raw_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and Clean Raw Data — read_raw_data","text":"","code":"read_raw_data(file, col_caps = TRUE, str_caps = TRUE)"},{"path":"http://www.shaunporwal.com/islet/reference/read_raw_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and Clean Raw Data — read_raw_data","text":"file string specifying path CSV file read. col_caps Logical. Whether convert column names uppercase. Default TRUE. str_caps Logical. Whether convert string column values uppercase. Default TRUE.","code":""},{"path":"http://www.shaunporwal.com/islet/reference/read_raw_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and Clean Raw Data — read_raw_data","text":"data frame cleaned column names data.","code":""},{"path":"http://www.shaunporwal.com/islet/reference/to_sql_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Format text from SQL file into proper SQL query — to_sql_query","title":"Format text from SQL file into proper SQL query — to_sql_query","text":"Format text SQL file proper SQL query","code":""},{"path":"http://www.shaunporwal.com/islet/reference/to_sql_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format text from SQL file into proper SQL query — to_sql_query","text":"","code":"to_sql_query(filepath)"},{"path":"http://www.shaunporwal.com/islet/reference/to_sql_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format text from SQL file into proper SQL query — to_sql_query","text":"filepath Path SQL file","code":""},{"path":"http://www.shaunporwal.com/islet/reference/to_sql_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format text from SQL file into proper SQL query — to_sql_query","text":"SQL query string","code":""},{"path":"http://www.shaunporwal.com/islet/reference/to_sql_query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format text from SQL file into proper SQL query — to_sql_query","text":"","code":"# Path to the SQL file filepath <- system.file(\"extdata\", \"my_sql_file.sql\", package = \"my_package\")  # Call the function to read the SQL file and format it into a query to_sql_query(filepath) #> Warning: file(\"\") only supports open = \"w+\" and open = \"w+b\": using the former #> [1] \"\""}]
