[{"path":"http://www.shaunporwal.com/islet/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 islet authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://www.shaunporwal.com/islet/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Shaun P. Porwal. Author, maintainer.","code":""},{"path":"http://www.shaunporwal.com/islet/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Porwal S (2023). islet: Provides Data Pipelining Functions. R package version 0.0.0.9000, http://www.shaunporwal.com/islet/.","code":"@Manual{,   title = {islet: Provides Data Pipelining Functions},   author = {Shaun P. Porwal},   year = {2023},   note = {R package version 0.0.0.9000},   url = {http://www.shaunporwal.com/islet/}, }"},{"path":"http://www.shaunporwal.com/islet/index.html","id":"islet","dir":"","previous_headings":"","what":"Provides Data Pipelining Functions","title":"Provides Data Pipelining Functions","text":"goal islet help establish secure data pipelines data cleaning analytics, designed teams analyzing patient outcome data. Islet, can easily clean process sensitive patient data, generating reports track data irregularities issues.","code":""},{"path":"http://www.shaunporwal.com/islet/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Provides Data Pipelining Functions","text":"can install development version islet GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"shaunporwal/islet\")"},{"path":"http://www.shaunporwal.com/islet/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Provides Data Pipelining Functions","text":"basic example shows solve common problem: ’ll still need render README.Rmd regularly, keep README.md --date. devtools::build_readme() handy . also use GitHub Actions re-render README.Rmd every time push. example workflow can found : https://github.com/r-lib/actions/tree/v1/examples. can also embed plots, example:  case, don’t forget commit push resulting figure files, display GitHub CRAN.","code":"library(islet) # Simple Example, Default '&' Border islet::make_banner(str_to_banner = 'analyze column from dataframe') #> #&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&& #> #&&  analyze column from dataframe  && #> #&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&& # Output Saved to Clipboard, Can Cmd+v or Ctrl+v to directly paste banner # New Banner Border Example islet::make_banner(str_to_banner = 'analyze column from dataframe',                    banner_chr = '+') #> #+++++++++++++++++++++++++++++++++++++ #> #++  analyze column from dataframe  ++ #> #+++++++++++++++++++++++++++++++++++++"},{"path":"http://www.shaunporwal.com/islet/reference/check_duplicates.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if there are duplicate rows in a dataframe based on grouped columns — check_duplicates","title":"Check if there are duplicate rows in a dataframe based on grouped columns — check_duplicates","text":"Check duplicate rows dataframe based grouped columns","code":""},{"path":"http://www.shaunporwal.com/islet/reference/check_duplicates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if there are duplicate rows in a dataframe based on grouped columns — check_duplicates","text":"","code":"check_duplicates(data_df, group_by_vars = NULL, print_dups = TRUE)"},{"path":"http://www.shaunporwal.com/islet/reference/check_duplicates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if there are duplicate rows in a dataframe based on grouped columns — check_duplicates","text":"data_df Dataframe checked duplicates group_by_vars string vector strings column name(s) group asserting uniqueness print_dups boolean argument, TRUE, allow function display duplicate rows","code":""},{"path":"http://www.shaunporwal.com/islet/reference/check_duplicates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if there are duplicate rows in a dataframe based on grouped columns — check_duplicates","text":"Duplicate rows, general variable/column groupings","code":""},{"path":"http://www.shaunporwal.com/islet/reference/check_duplicates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if there are duplicate rows in a dataframe based on grouped columns — check_duplicates","text":"","code":"# Load the dplyr package library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union  # Create a sample data frame data_df <- data.frame(   ID = c(1, 1, 2, 3, 4),   Age = c(25, 25, 30, 40, 50),   Income = c(50000, 50000, 60000, 70000, 80000) )  # Call the function to check for duplicates in the entire data frame check_duplicates(data_df) #> [1] \"Duplicates Exist:\" #>   ID Age Income #> 1  1  25  50000  # Call the function to check for duplicates within the \"ID\" column check_duplicates(data_df, group_by_vars = \"ID\") #> [1] \"Duplicates Exist:\" #>   ID Age Income #> 1  1  25  50000  # Call the function to check for duplicates within the \"ID\" and \"Age\" columns check_duplicates(data_df, group_by_vars = c(\"ID\", \"Age\")) #> [1] \"Duplicates Exist:\" #>   ID Age Income #> 1  1  25  50000"},{"path":"http://www.shaunporwal.com/islet/reference/check_values.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to check to values from their from data sources — check_values","title":"A function to check to values from their from data sources — check_values","text":"function checks inspects mapping values specified columns dataframe, comparing '' '' columns provided.","code":""},{"path":"http://www.shaunporwal.com/islet/reference/check_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to check to values from their from data sources — check_values","text":"","code":"check_values(data_df, from, to = NULL, type, eval_func = as.numeric)"},{"path":"http://www.shaunporwal.com/islet/reference/check_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to check to values from their from data sources — check_values","text":"data_df dataframe includes variables. string vector strings contain variable names. string vector strings containing name variables (default NULL). type Either \"map\" \"cont\" specify type checking performed. eval_func function call type check performed \"cont\" variables (default .numeric).","code":""},{"path":"http://www.shaunporwal.com/islet/reference/check_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to check to values from their from data sources — check_values","text":"invisible dataframe results check.","code":""},{"path":"http://www.shaunporwal.com/islet/reference/check_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to check to values from their from data sources — check_values","text":"","code":"# Assuming you have a DataFrame called 'my_data' with 'from_col' and 'to_col' columns check_values(   data_df = my_data,   from = \"from_col\",   to = \"to_col\",   type = \"map\" ) #> Error in eval(expr, envir, enclos): object 'my_data' not found"},{"path":"http://www.shaunporwal.com/islet/reference/compare_dataframes.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare 2 dataframes — compare_dataframes","title":"Compare 2 dataframes — compare_dataframes","text":"function compares two dataframes analyzing numeric, factor, character, binary, date fields. returns list dataframes results comparison.","code":""},{"path":"http://www.shaunporwal.com/islet/reference/compare_dataframes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare 2 dataframes — compare_dataframes","text":"","code":"compare_dataframes(   oldData = NULL,   newData = NULL,   suffixTerm = \"\",   indOutcomes = c(\"\"),   surgCol = \"surgeon\" )"},{"path":"http://www.shaunporwal.com/islet/reference/compare_dataframes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare 2 dataframes — compare_dataframes","text":"oldData dataframe representing old data. newData dataframe representing new data. NULL, function analyze oldData. suffixTerm character string representing suffix term. indOutcomes character vector representing indent outcomes (sure accurate). surgCol character string representing surgeon column name.","code":""},{"path":"http://www.shaunporwal.com/islet/reference/compare_dataframes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare 2 dataframes — compare_dataframes","text":"list dataframes containing results comparison.","code":""},{"path":"http://www.shaunporwal.com/islet/reference/compare_dataframes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare 2 dataframes — compare_dataframes","text":"","code":"old_data <- data.frame(...) #> Error in eval(expr, envir, enclos): '...' used in an incorrect context new_data <- data.frame(...) #> Error in eval(expr, envir, enclos): '...' used in an incorrect context compare_dataframes(oldData = old_data, newData = new_data) #> Error in eval(expr, envir, enclos): object 'new_data' not found"},{"path":"http://www.shaunporwal.com/islet/reference/filter_cases.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Cases from a Data Frame — filter_cases","title":"Filter Cases from a Data Frame — filter_cases","text":"function filters cases data frame based given logical expression. can also group data certain variables needed.","code":""},{"path":"http://www.shaunporwal.com/islet/reference/filter_cases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Cases from a Data Frame — filter_cases","text":"","code":"filter_cases(   data_df,   select,   logic,   group_by_vars = NULL,   rds,   data_path = file.path(getwd(), \"secure_data\", PROJECT_DICT$data_date),   remove = TRUE )"},{"path":"http://www.shaunporwal.com/islet/reference/filter_cases.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Cases from a Data Frame — filter_cases","text":"data_df data frame filtered. select character vector variable names used logical expression. logic character string representing logical expression filter cases. group_by_vars character vector variable names group (default: NULL). rds character string specifying filename RDS file storing removed cases. data_path character string specifying file path saving RDS file (default: \"secure_data/<data_date>\"). remove logical value indicating whether remove cases meet logical expression (default: TRUE).","code":""},{"path":"http://www.shaunporwal.com/islet/reference/filter_cases.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Cases from a Data Frame — filter_cases","text":"invisible data frame either cases meet logical expression (remove = TRUE) ungrouped input data (remove = FALSE).","code":""},{"path":"http://www.shaunporwal.com/islet/reference/filter_cases.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Cases from a Data Frame — filter_cases","text":"","code":"# Filter cases where age is greater than or equal to 18 filtered_data <- filter_cases(data_df = my_data, select = \"age\", logic = \"age >= 18\", rds = \"cases_removed\") #> Error in eval(expr, envir, enclos): object 'my_data' not found"},{"path":"http://www.shaunporwal.com/islet/reference/from_win_to_mac.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — from_win_to_mac","title":"Title — from_win_to_mac","text":"Title","code":""},{"path":"http://www.shaunporwal.com/islet/reference/from_win_to_mac.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — from_win_to_mac","text":"","code":"from_win_to_mac(windows_path, mounted_drive_name)"},{"path":"http://www.shaunporwal.com/islet/reference/from_win_to_mac.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — from_win_to_mac","text":"windows_path Windows path converted Mac path mounted_drive_name Mounted drive included path","code":""},{"path":"http://www.shaunporwal.com/islet/reference/from_win_to_mac.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — from_win_to_mac","text":"Converted Mac path","code":""},{"path":"http://www.shaunporwal.com/islet/reference/from_win_to_mac.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title — from_win_to_mac","text":"","code":"# Convert a Windows path to a Mac path with a mounted drive name of \"mydrive\" from_win_to_mac(\"C:\\\\Users\\\\myname\\\\Documents\\\\myfile.txt\", \"mydrive\") #> [1] \"/Volumes/mydriveC:/Users/myname/Documents/myfile.txt\"  # Convert a Windows path to a Mac path with a mounted drive name of \"Documents\" from_win_to_mac(\"C:\\\\Users\\\\myname\\\\Documents\\\\myfile.txt\", \"Documents\") #> [1] \"/Volumes/DocumentsC:/Users/myname/Documents/myfile.txt\""},{"path":"http://www.shaunporwal.com/islet/reference/line_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Log Information About Comments and TODOs — line_log","title":"Log Information About Comments and TODOs — line_log","text":"function logs information comments TODOs added file, storing metadata specified data path.","code":""},{"path":"http://www.shaunporwal.com/islet/reference/line_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log Information About Comments and TODOs — line_log","text":"","code":"line_log(   type,   item,   current_file = get_current_file(),   data_path = file.path(getwd(), \"data\", PROJECT_DICT$data_date) )"},{"path":"http://www.shaunporwal.com/islet/reference/line_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log Information About Comments and TODOs — line_log","text":"type character string representing type annotation, either \"COMMENT\" \"TODO\". item character string object containing comment TODO line(s). current_file character string representing name current file edited. Default current file. data_path character string representing path directory log files saved. Default \"secure_data\" subfolder working directory.","code":""},{"path":"http://www.shaunporwal.com/islet/reference/line_log.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log Information About Comments and TODOs — line_log","text":"NULL. function called side effect saving log files.","code":""},{"path":"http://www.shaunporwal.com/islet/reference/line_log.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Log Information About Comments and TODOs — line_log","text":"","code":"# Log a comment line_log(\"COMMENT\", \"This is a comment.\") #> Error in eval(parse(text = text, keep.source = FALSE), envir): object 'PROJECT_DICT' not found  # Log a TODO with a custom current_file and data_path line_log(\"TODO\", \"This is a TODO.\", \"my_file.R\", \"custom_data_path\") #> Warning: cannot open compressed file 'custom_data_path/Metadata/Line Logs/TODO_204903.rds', probable reason 'No such file or directory' #> Error in gzfile(file, mode): cannot open the connection"},{"path":"http://www.shaunporwal.com/islet/reference/make_banner.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Banner for Code Separation/Organization — make_banner","title":"Create a Banner for Code Separation/Organization — make_banner","text":"Create Banner Code Separation/Organization","code":""},{"path":"http://www.shaunporwal.com/islet/reference/make_banner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Banner for Code Separation/Organization — make_banner","text":"","code":"make_banner(str_to_banner, banner_chr = \"&\", output = TRUE)"},{"path":"http://www.shaunporwal.com/islet/reference/make_banner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Banner for Code Separation/Organization — make_banner","text":"str_to_banner String Convert Banner banner_chr Banner Boundary Character output Boolean, TRUE output, FALSE Output","code":""},{"path":"http://www.shaunporwal.com/islet/reference/make_banner.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Banner for Code Separation/Organization — make_banner","text":"Invisible String","code":""},{"path":"http://www.shaunporwal.com/islet/reference/make_banner.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Banner for Code Separation/Organization — make_banner","text":"","code":"make_banner(str_to_banner = 'asdf', banner_chr = '&', output = TRUE) #> #&&&&&&&&&&&& #> #&&  asdf  && #> #&&&&&&&&&&&&"},{"path":"http://www.shaunporwal.com/islet/reference/parse_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a dataframe and compute statistics for different variable types — parse_function","title":"Parse a dataframe and compute statistics for different variable types — parse_function","text":"function takes dataframe input computes statistics different variable types, including dates, binary, characters, factors, numeric variables. can also compute statistics per surgeon per year specified.","code":""},{"path":"http://www.shaunporwal.com/islet/reference/parse_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a dataframe and compute statistics for different variable types — parse_function","text":"","code":"parse_function(   parse_df,   suffixTerm = \"\",   indOutcomes = c(\"\"),   surgCol = \"surgeon\",   addYears = FALSE )"},{"path":"http://www.shaunporwal.com/islet/reference/parse_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse a dataframe and compute statistics for different variable types — parse_function","text":"parse_df Dataframe parse suffixTerm Suffix term (default: \"\") indOutcomes character vector individual outcomes compare per surgeon (default: c(\"\")) surgCol character string specifying surgeon column (default: \"surgeon\") addYears boolean indicating whether add year values (default: FALSE)","code":""},{"path":"http://www.shaunporwal.com/islet/reference/parse_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse a dataframe and compute statistics for different variable types — parse_function","text":"list dataframes containing computed statistics different variable types","code":""},{"path":"http://www.shaunporwal.com/islet/reference/parse_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse a dataframe and compute statistics for different variable types — parse_function","text":"","code":"# Assuming you have a dataframe called df parsed_data <- parse_function(df) #> Error in UseMethod(\"ungroup\"): no applicable method for 'ungroup' applied to an object of class \"function\" # To include year values and individual outcomes per surgeon: parsed_data <- parse_function(df, indOutcomes = c(\"outcome1\", \"outcome2\"), addYears = TRUE) #> Error in UseMethod(\"ungroup\"): no applicable method for 'ungroup' applied to an object of class \"function\""},{"path":"http://www.shaunporwal.com/islet/reference/run_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to run the ","title":"Function to run the ","text":"Wrapper function .call() command applied script function.  Benefit de-clutter calls.  Drawback debugging convoluted.","code":""},{"path":"http://www.shaunporwal.com/islet/reference/run_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to run the ","text":"","code":"run_file(   file,   args = NULL,   ignore_warnings =     \"NAs introduced by coercion|failed to parse|no non-missing arguments to max; returning -Inf|no non-missing arguments to min; returning Inf\" )"},{"path":"http://www.shaunporwal.com/islet/reference/run_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to run the ","text":"file function/script call args list parameters specified prior running function/script specified \"file\" ignore_warnings now, default logic muffle routine \"warnings\" likely best prevent clogging output main.R script (NAs values created).  Can set \"\" override functionality.","code":""},{"path":"http://www.shaunporwal.com/islet/reference/run_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to run the ","text":"return_list","code":""},{"path":"http://www.shaunporwal.com/islet/reference/save_issue.html","id":null,"dir":"Reference","previous_headings":"","what":"Save issue data to a specified path — save_issue","title":"Save issue data to a specified path — save_issue","text":"function saves issue data specified path prints saved data console. takes data frame, RDS object, optional data issues paths inputs.","code":""},{"path":"http://www.shaunporwal.com/islet/reference/save_issue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save issue data to a specified path — save_issue","text":"","code":"save_issue(   data_df,   rds,   data_path = file.path(getwd(), \"secure_data\", PROJECT_DICT$data_date),   issues_path = file.path(getwd(), \"secure_data\", PROJECT_DICT$data_date, \"metadata\",     \"issues\") )"},{"path":"http://www.shaunporwal.com/islet/reference/save_issue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save issue data to a specified path — save_issue","text":"data_df data frame containing issue data saved rds RDS object used saving data data_path optional character string specifying data path. Defaults 'file.path(getwd(), \"secure_data\", PROJECT_DICT$data_date)' issues_path optional character string specifying issues path. Defaults 'file.path(getwd(), \"secure_data\", PROJECT_DICT$data_date, 'metadata', 'issues')'","code":""},{"path":"http://www.shaunporwal.com/islet/reference/save_issue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save issue data to a specified path — save_issue","text":"invisible copy saved data frame","code":""},{"path":"http://www.shaunporwal.com/islet/reference/save_issue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save issue data to a specified path — save_issue","text":"","code":"# Save issue data to the default paths save_issue(data_df, rds) #> Error in eval(parse(text = text, keep.source = FALSE), envir): object 'PROJECT_DICT' not found  # Save issue data to custom paths save_issue(data_df, rds, \"custom_data_path\", \"custom_issues_path\") #> Error in eval(expr, envir, enclos): object 'rds' not found"},{"path":"http://www.shaunporwal.com/islet/reference/to_sql_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Format text from SQL file into proper SQL query — to_sql_query","title":"Format text from SQL file into proper SQL query — to_sql_query","text":"Format text SQL file proper SQL query","code":""},{"path":"http://www.shaunporwal.com/islet/reference/to_sql_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format text from SQL file into proper SQL query — to_sql_query","text":"","code":"to_sql_query(filepath)"},{"path":"http://www.shaunporwal.com/islet/reference/to_sql_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format text from SQL file into proper SQL query — to_sql_query","text":"filepath Path SQL file","code":""},{"path":"http://www.shaunporwal.com/islet/reference/to_sql_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format text from SQL file into proper SQL query — to_sql_query","text":"SQL query string","code":""},{"path":"http://www.shaunporwal.com/islet/reference/to_sql_query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format text from SQL file into proper SQL query — to_sql_query","text":"","code":"# Path to the SQL file filepath <- system.file(\"extdata\", \"my_sql_file.sql\", package = \"my_package\")  # Call the function to read the SQL file and format it into a query to_sql_query(filepath) #> Warning: file(\"\") only supports open = \"w+\" and open = \"w+b\": using the former #> [1] \"\""}]
